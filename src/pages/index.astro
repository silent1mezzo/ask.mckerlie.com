---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import { Picture } from 'astro:assets';
import robotMe from "../../public/adam-8bit.webp"; // Image is 1600x900
---

<Layout title="Welcome to Robot Adam">
	<main>
		<h1>Welcome to <span class="text-gradient">Robot Adam</span></h1>
		<Picture
			src={robotMe}
			width="100"
			height="100"
			loading="lazy"
			decoding="async"
			class="robot-image"
			alt="A robot version of me"
		/>
		<p class="instructions">
			Hey ðŸ‘‹ I'm Robot Adam. You can ask me questions about Adam. I may or may not know the answer but I'll probably make something up anyways.<br /><br />
			This is an experiment to learn more about LLM's and how they can be built and incorporated into a site.
		</p>
		<ul class="autogrow chat"></ul>
		<footer class="container">
			<form action="#" onsubmit="handleSubmit(event);">
			  <div class="autogrow">
				<textarea
				  id="message"
				  name="message"
				  oninput="this.parentNode.dataset.value = this.value"
				  placeholder="Who is Adam McKerlie?"
				  cols="30"></textarea>
				<button type="submit">
				  <svg
					width="24"
					height="24"
					viewBox="0 0 32 32"
					fill="none"
					xmlns="http://www.w3.org/2000/svg"
				  >
					<title>Send</title>
					<path
					  fill-rule="evenodd"
					  clip-rule="evenodd"
					  d="M5.64161 2.18531C6.04591 2.14469 6.453 2.22818 6.80868 2.42468L6.81379 2.4275L27.9217 14.25L27.9244 14.2515C28.2358 14.4244 28.4954 14.6774 28.6764 14.9842C28.8578 15.292 28.9535 15.6427 28.9535 16C28.9535 16.3572 28.8578 16.708 28.6764 17.0157C28.4954 17.3226 28.2358 17.5756 27.9244 17.7485L27.9217 17.75L6.80869 29.5753C6.45301 29.7718 6.04591 29.8553 5.64161 29.8147C5.2373 29.774 4.85495 29.6112 4.54548 29.3479C4.236 29.0846 4.01408 28.7332 3.90925 28.3406C3.80455 27.9485 3.82162 27.5338 3.95818 27.1517L7.93379 16L3.95868 4.84968C3.82192 4.46735 3.8045 4.05166 3.90925 3.65933C4.01408 3.26675 4.236 2.9154 4.54548 2.65208C4.85496 2.38875 5.2373 2.22594 5.64161 2.18531ZM27.4376 15.125L26.9489 15.9975L5.84155 4.17529L5.84205 4.17668L9.8113 15.3106C9.98396 15.7539 9.98396 16.246 9.8113 16.6894L5.84155 27.8247L26.9489 16.0025L26.9535 16L27.4376 15.125Z"
					  fill="currentColor"></path>
					<path
					  fill-rule="evenodd"
					  clip-rule="evenodd"
					  d="M8 16C8 15.4477 8.44772 15 9 15H17C17.5523 15 18 15.4477 18 16C18 16.5523 17.5523 17 17 17H9C8.44772 17 8 16.5523 8 16Z"
					  fill="currentColor"></path>
				  </svg>
				</button>
			  </div>
			</form>
		  </footer>
	</main>
</Layout>

<style>
	@font-face {
		font-family: "MD IO 0.5";
		src: url("https://fonts-cdn.astro.build/MD IO/Web/MDIO0.5-Regular.woff2")
			format("woff2");
		font-weight: 400;
		font-style: normal;
		font-display: swap;
	}
	a {
		color: rgba(255, 255, 255, 0.8);
	}
	.container {
        width: 100%;
        max-width: var(--container-width);
        margin-left: auto;
        margin-right: auto;
        box-shadow: 0 0 40px 2px #17191e;
      }
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.robot-image {
		display: block;
		margin-left: auto;
		margin-right: auto;
		margin-bottom: 50px;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
	
	
	footer {
        display: flex;
        flex-flow: column;
        position: relative;
      }

      footer button {
        position: absolute;
        right: 19px;
        top: 19px;
        --size: 2.5rem;
        width: var(--size);
        height: var(--size);
        border-radius: 50%;
        border: 0;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      footer svg {
        margin-right: -0.25rem;
      }

      .autogrow {
        display: grid;
        overflow-y: scroll;
        padding-left: 1px;
      }
      .autogrow::-webkit-scrollbar {
        display: none;
      }
      .autogrow > textarea {
        resize: none;
        width: 100vw;
        height: 100px;
        max-width: var(--container-width);
        outline: 0;
        flex-grow: 1;
        padding: 1rem;
        padding-right: 68px;
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
          Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
          sans-serif;
        font-size: 1.25rem;
        line-height: 1;
        border: 1px solid #343841;
        border-bottom: 0;
        margin-left: -1px;
        margin-right: -1px;

        background: #23262d;
        color: #bfc1c9;

        /* Place on top of each other */
        grid-area: 1 / 1 / 2 / 2;
      }
      .autogrow > textarea:focus {
        border-color: white;
      }

      button[type="submit"] {
        background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
      }

      button {
        --size: 2rem;
        width: var(--size);
        height: var(--size);
        border: 0;
        background: transparent;
        margin: 0;
        padding: 0;
        color: rgb(255 255 255 / 60%);
      }

      button:hover {
        color: rgb(255 255 255 / 100%);
      }

      button.fill {
        background: rgb(255 255 255 / 100%);
        border-radius: 100%;
        color: #17191e;
      }

	  .chat pre,
      .chat code {
        background: rgba(255 255 255 / 0.1);
      }
      .chat pre > code {
        padding: 0;
        border-radius: 0;
        background: none;
      }
      .chat pre {
        padding: 1rem 1.5rem;
        margin-left: -1.5rem;
        margin-right: -1.5rem;
        max-width: calc(100% + 3rem);
        overflow-x: auto;
      }
      .chat > .message {
        --radius: 1.75rem;
        position: relative;
        border-radius: var(--radius);
        grid-column: span 6 / -1;
        padding: 1rem 1.5rem;
        animation: fade-in 300ms ease-out forwards;
      }
      .chat > .message::after {
        --size: 1rem;
        content: "";
        position: absolute;
        bottom: 0;
        height: var(--size);
        width: var(--size);
        z-index: 2;
      }
      .chat > .message[data-user] {
        background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
        border-bottom-right-radius: 0;
        color: white;
      }
      .chat > .message[data-user]::after {
        background: #bc52ee;
        right: calc(var(--size) * -1);
        border-bottom-right-radius: 8rem;
        background: radial-gradient(
          circle at top right,
          rgba(0, 0, 0, 0) 0,
          rgba(0, 0, 0, 0) var(--size),
          #bc52ee var(--size)
        );
      }
      .chat > .message:not([data-user])::after {
        border-top-left-radius: var(--size);
        border-bottom-left-radius: 8rem;
        background: radial-gradient(
          circle at top left,
          rgba(0, 0, 0, 0) 0,
          rgba(0, 0, 0, 0) var(--size),
          #d6d8e2 var(--size)
        );
        left: calc(var(--size) * -1);
      }
      .chat > .message:not([data-user]) {
        background: linear-gradient(180deg, #ffffff, #d6d8e2);
        border-bottom-left-radius: 0;
        grid-column: 1 / -1;
      }
      .chat > .message:not([data-user]) code {
        background: rgba(0 0 0 / 0.075);
      }
	  .sources {
        position: relative;
        grid-column: 1 / -1;
        margin-top: 0;
        font-size: 0.9rem;
        display: flex;
        flex-flow: column;
        gap: 0.33em;
        padding: 1rem 1.5rem;
        color: rgba(255, 255, 255, 0.8);
        font-family: "MD IO 0.5", system-ui, -apple-system, BlinkMacSystemFont;
      }
      .sources::before,
      .sources::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }
      .sources::before {
        z-index: -1;
        background: #17191e;
        top: 2px;
        right: 2px;
        bottom: 2px;
        left: 2px;
      }
      .sources::after {
        z-index: -2;
        background: linear-gradient(247.23deg, #4af2c8 0%, #2f4cb3 100%);
      }
      .sources h5 {
        margin: 1rem -1.5rem -1rem;
        padding: 1rem 1.5rem;
        background: linear-gradient(
          to bottom,
          rgba(255, 255, 255, 0.1) 0%,
          rgba(255, 255, 255, 0) 200%
        );
        font-size: 0.9rem;
        font-weight: normal;
        color: white;
      }

      .sources h2 {
        margin: 0.5rem 0 0.25rem 0;
        color: white;
      }
      .sources > a {
        display: block;
        color: rgba(255, 255, 255, 0.8);
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
      }
      .sources > h5 > a {
        color: white;
      }
      .sources > a::before {
        content: "> ";
        display: inline-block;
        margin-right: 8px;
        opacity: 0.4;
      }
      .sources > a:hover::before {
        opacity: 0.5;
      }
      .sources > a:is(:hover, :focus) {
        color: rgba(255, 255, 255, 1);
      }
      @keyframes fade-in {
        from {
          opacity: 0;
          transform: translateY(1rem);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      @keyframes shake {
        0% {
          transform: translateX(0);
        }
        25% {
          transform: translateX(0.75rem);
        }
        50% {
          transform: translateX(-0.75rem);
        }
        75% {
          transform: translateX(0.75rem);
        }
        100% {
          transform: translateX(0);
        }
      }

      @media (min-width: 640px) {
        .chat > .message {
          grid-column: span 5 / -1;
        }
        .autogrow > textarea {
          border-top-right-radius: 12px;
          border-top-left-radius: 12px;
        }
      }
</style>

<script>
	const h = (
		tag: string,
		props: Record<string, any> = {},
		...children: any[]
	) => {
		const node = document.createElement(tag);
		for (const [key, value] of Object.entries(props)) {
			node.setAttribute(key, value);
		}
		for (const child of children) {
			if (child instanceof Node) {
				node.appendChild(child);
			} else if (child || child === 0) {
				node.innerHTML = child;
			}
		}
		return node;
	};

	const messages = document.querySelector(".chat") as HTMLDivElement;
	const apiURL = 'https://api-mckerlie-com.fly.dev/ask/'
	//const apiURL = 'http://127.0.0.1:8000/ask/'
	async function handleSubmit(event: Event) {
		event.preventDefault();
		const form = event.target as HTMLFormElement;
        const textarea = form.message as HTMLTextAreaElement;
        let message = textarea.value;

		const response = await fetch(`${apiURL}?question=${message}`);
		const answer = await response.json();
		const aiQuestion = h(
			"li",
			{ class: "message" },
			`${answer.question}`
		);

		const aiAnswer = h(
			"li",
			{ class: "sources" },
			`${answer.answer}`
		);
		messages.appendChild(aiQuestion);
		messages.appendChild(aiAnswer);
	};

	globalThis.handleSubmit = handleSubmit;
</script>